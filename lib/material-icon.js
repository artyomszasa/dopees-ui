import dom from "./dom.js";
import { icons as ics } from "./icons.js";
const icons = ics;
const keyIconType = Symbol('iconType');
export class DopeMaterialIcon extends HTMLElement {
  static get observedAttributes() {
    return ['type'];
  }

  removeSvg() {
    if (this.icon) {
      dom.remove(this.icon);
      this.icon = undefined;
      this.dispatchEvent(new CustomEvent(DopeMaterialIcon.removeEvent, {
        bubbles: false,
        cancelable: false
      }));
    }
  }

  updateSvg() {
    if (!this.iconType) {
      this.removeSvg();
    } else {
      if (this.icon) {
        if (this.icon[keyIconType] === this.iconType) {
          return;
        }

        this.icon.remove();
        this.icon = undefined;
      }

      if (this.parentNode && this.ownerDocument) {
        const svg = icons[this.iconType];

        if (svg) {
          const icon = this.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'svg');

          if (svg.viewBox) {
            icon.setAttribute('viewBox', svg.viewBox);
          }

          icon.innerHTML = svg.contents;
          icon[keyIconType] = this.iconType;
          const slot = this.getAttribute('slot');

          if (slot) {
            icon.setAttribute('slot', slot);
          }

          this.icon = this.parentNode.insertBefore(icon, this);
          this.icon.addEventListener('click', e => {
            const ex = new CustomEvent(DopeMaterialIcon.clickEvent, {
              bubbles: true,
              cancelable: true,
              detail: e
            });
            this.dispatchEvent(ex);

            if (ex.cancelBubble) {
              e.stopPropagation();
            }

            if (ex.defaultPrevented) {
              e.preventDefault();
            }
          }, false);
          this.dispatchEvent(new CustomEvent(DopeMaterialIcon.connectEvent, {
            bubbles: false,
            cancelable: false,
            detail: icon
          }));
        }
      }
    }
  }

  attributeChangedCallback(name, _, newValue) {
    if ('type' === name) {
      this.iconType = newValue;
      this.updateSvg();
    }
  }

  connectedCallback() {
    this.style.display = 'none';
    this.updateSvg();
  }

  disconnectedCallback() {
    this.removeSvg();
  }

}
DopeMaterialIcon.removeEvent = 'icon-remove';
DopeMaterialIcon.connectEvent = 'icon-connect';
DopeMaterialIcon.clickEvent = 'icon-click';
;
customElements.define('dope-material-icon', DopeMaterialIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLEVBQUUsS0FEdUQ7QUFFaEUsWUFBQSxVQUFVLEVBQUUsS0FGb0Q7QUFHaEUsWUFBQSxNQUFNLEVBQUU7QUFId0QsV0FBL0MsQ0FBbkI7QUFLRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxFQUFBLHdCQUF3QixDQUFDLElBQUQsRUFBZSxDQUFmLEVBQTJCLFFBQTNCLEVBQTRDO0FBQ2xFLFFBQUksV0FBVyxJQUFmLEVBQXFCO0FBQ25CLFdBQUssUUFBTCxHQUFnQixRQUFoQjtBQUNBLFdBQUssU0FBTDtBQUNEO0FBQ0Y7O0FBRUQsRUFBQSxpQkFBaUIsR0FBQTtBQUNmLFNBQUssS0FBTCxDQUFXLE9BQVgsR0FBcUIsTUFBckI7QUFDQSxTQUFLLFNBQUw7QUFDRDs7QUFFRCxFQUFBLG9CQUFvQixHQUFBO0FBQ2xCLFNBQUssU0FBTDtBQUNEOztBQXBGOEM7QUFDeEMsZ0JBQUEsQ0FBQSxXQUFBLEdBQWMsYUFBZDtBQUNBLGdCQUFBLENBQUEsWUFBQSxHQUFlLGNBQWY7QUFDQSxnQkFBQSxDQUFBLFVBQUEsR0FBYSxZQUFiO0FBa0ZSO0FBRUQsY0FBYyxDQUFDLE1BQWYsQ0FBc0Isb0JBQXRCLEVBQTRDLGdCQUE1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkb20gZnJvbSBcIi4vZG9tXCI7XG5pbXBvcnQgeyBJY29uRGVzY3JpcHRvciwgaWNvbnMgYXMgaWNzIH0gZnJvbSBcIi4vaWNvbnNcIjtcblxuaW50ZXJmYWNlIEljb25zIHtcbiAgW2tleTogc3RyaW5nXTogSWNvbkRlc2NyaXB0b3J8dW5kZWZpbmVkXG59XG5cbmNvbnN0IGljb25zOiBJY29ucyA9IGljcztcblxuY29uc3Qga2V5SWNvblR5cGUgPSBTeW1ib2woJ2ljb25UeXBlJyk7XG5cbmV4cG9ydCBjbGFzcyBEb3BlTWF0ZXJpYWxJY29uIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgcmVtb3ZlRXZlbnQgPSAnaWNvbi1yZW1vdmUnO1xuICBzdGF0aWMgY29ubmVjdEV2ZW50ID0gJ2ljb24tY29ubmVjdCc7XG4gIHN0YXRpYyBjbGlja0V2ZW50ID0gJ2ljb24tY2xpY2snO1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsgJ3R5cGUnIF0gfVxuXG4gIHByaXZhdGUgaWNvblR5cGU/OiBzdHJpbmc7XG5cbiAgaWNvbj86IFNWR1NWR0VsZW1lbnQ7XG5cbiAgcHJpdmF0ZSByZW1vdmVTdmcoKSB7XG4gICAgaWYgKHRoaXMuaWNvbikge1xuICAgICAgZG9tLnJlbW92ZSh0aGlzLmljb24pO1xuICAgICAgdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEb3BlTWF0ZXJpYWxJY29uLnJlbW92ZUV2ZW50LCB7XG4gICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3ZnKCkge1xuICAgIGlmICghdGhpcy5pY29uVHlwZSkge1xuICAgICAgdGhpcy5yZW1vdmVTdmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaWNvbikge1xuICAgICAgICBpZiAodGhpcy5pY29uW2tleUljb25UeXBlXSA9PT0gdGhpcy5pY29uVHlwZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmljb24ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuaWNvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5vd25lckRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IHN2ZyA9IGljb25zW3RoaXMuaWNvblR5cGVdO1xuICAgICAgICBpZiAoc3ZnKSB7XG4gICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgIGlmIChzdmcudmlld0JveCkge1xuICAgICAgICAgICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBzdmcudmlld0JveCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGljb24uaW5uZXJIVE1MID0gc3ZnLmNvbnRlbnRzO1xuICAgICAgICAgIGljb25ba2V5SWNvblR5cGVdID0gdGhpcy5pY29uVHlwZTtcbiAgICAgICAgICBjb25zdCBzbG90ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKTtcbiAgICAgICAgICBpZiAoc2xvdCkge1xuICAgICAgICAgICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCBzbG90KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pY29uID0gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpY29uLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLmljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4ID0gbmV3IEN1c3RvbUV2ZW50PE1vdXNlRXZlbnQ+KERvcGVNYXRlcmlhbEljb24uY2xpY2tFdmVudCwge1xuICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBkZXRhaWw6IGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV4KTtcbiAgICAgICAgICAgIGlmIChleC5jYW5jZWxCdWJibGUpIHtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEb3BlTWF0ZXJpYWxJY29uLmNvbm5lY3RFdmVudCwge1xuICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRldGFpbDogaWNvblxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lOiBzdHJpbmcsIF8/OiBzdHJpbmcsIG5ld1ZhbHVlPzogc3RyaW5nKSB7XG4gICAgaWYgKCd0eXBlJyA9PT0gbmFtZSkge1xuICAgICAgdGhpcy5pY29uVHlwZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVTdmcoKTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy51cGRhdGVTdmcoKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVtb3ZlU3ZnKCk7XG4gIH1cbn07XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZG9wZS1tYXRlcmlhbC1pY29uJywgRG9wZU1hdGVyaWFsSWNvbik7Il0sInNvdXJjZVJvb3QiOiIifQ==