import dom from "./dom.js";
import { icons as ics } from "./icons.js";
const icons = ics;
const keyIconType = Symbol('iconType');
export class DopeMaterialIcon extends HTMLElement {
  static get observedAttributes() {
    return ['type'];
  }

  removeSvg() {
    if (this.icon) {
      dom.remove(this.icon);
      this.icon = undefined;
    }
  }

  updateSvg() {
    if (!this.iconType) {
      this.removeSvg();
    } else {
      if (this.icon) {
        if (this.icon[keyIconType] === this.iconType) {
          return;
        }

        this.icon.remove();
        this.icon = undefined;
      }

      if (this.parentNode && this.ownerDocument) {
        const svg = icons[this.iconType];

        if (svg) {
          const icon = this.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'svg');

          if (svg.viewBox) {
            icon.setAttribute('viewBox', svg.viewBox);
          }

          icon.innerHTML = svg.contents;
          icon[keyIconType] = this.iconType;
          this.icon = this.appendChild(icon);
        }
      }
    }
  }

  attributeChangedCallback(name, _, newValue) {
    if ('type' === name) {
      this.iconType = newValue;
      this.updateSvg();
    }
  }

  connectedCallback() {
    this.updateSvg();
  }

  disconnectedCallback() {
    this.removeSvg();
  }

}
;
customElements.define('dope-material-icon', DopeMaterialIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFsLWljb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUFQLE1BQWdCLFVBQWhCO0FBQ0EsU0FBeUIsS0FBSyxJQUFJLEdBQWxDLFFBQTZDLFlBQTdDO0FBTUEsTUFBTSxLQUFLLEdBQVUsR0FBckI7QUFFQSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBRCxDQUExQjtBQUVBLE9BQU0sTUFBTyxnQkFBUCxTQUFnQyxXQUFoQyxDQUEyQztBQUMvQyxhQUFXLGtCQUFYLEdBQTZCO0FBQUssV0FBTyxDQUFFLE1BQUYsQ0FBUDtBQUFtQjs7QUFNN0MsRUFBQSxTQUFTLEdBQUE7QUFDZixRQUFJLEtBQUssSUFBVCxFQUFlO0FBQ2IsTUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEtBQUssSUFBaEI7QUFDQSxXQUFLLElBQUwsR0FBWSxTQUFaO0FBQ0Q7QUFDRjs7QUFFTyxFQUFBLFNBQVMsR0FBQTtBQUNmLFFBQUksQ0FBQyxLQUFLLFFBQVYsRUFBb0I7QUFDbEIsV0FBSyxTQUFMO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxLQUFLLElBQVQsRUFBZTtBQUNiLFlBQUksS0FBSyxJQUFMLENBQVUsV0FBVixNQUEyQixLQUFLLFFBQXBDLEVBQThDO0FBQzVDO0FBQ0Q7O0FBQ0QsYUFBSyxJQUFMLENBQVUsTUFBVjtBQUNBLGFBQUssSUFBTCxHQUFZLFNBQVo7QUFDRDs7QUFDRCxVQUFJLEtBQUssVUFBTCxJQUFtQixLQUFLLGFBQTVCLEVBQTJDO0FBQ3pDLGNBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLFFBQU4sQ0FBakI7O0FBQ0EsWUFBSSxHQUFKLEVBQVM7QUFDUCxnQkFBTSxJQUFJLEdBQUcsS0FBSyxhQUFMLENBQW1CLGVBQW5CLENBQW1DLDRCQUFuQyxFQUFpRSxLQUFqRSxDQUFiOztBQUNBLGNBQUksR0FBRyxDQUFDLE9BQVIsRUFBaUI7QUFDZixZQUFBLElBQUksQ0FBQyxZQUFMLENBQWtCLFNBQWxCLEVBQTZCLEdBQUcsQ0FBQyxPQUFqQztBQUNEOztBQUNELFVBQUEsSUFBSSxDQUFDLFNBQUwsR0FBaUIsR0FBRyxDQUFDLFFBQXJCO0FBQ0EsVUFBQSxJQUFJLENBQUMsV0FBRCxDQUFKLEdBQW9CLEtBQUssUUFBekI7QUFDQSxlQUFLLElBQUwsR0FBWSxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBWjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELEVBQUEsd0JBQXdCLENBQUMsSUFBRCxFQUFlLENBQWYsRUFBMkIsUUFBM0IsRUFBNEM7QUFDbEUsUUFBSSxXQUFXLElBQWYsRUFBcUI7QUFDbkIsV0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsV0FBSyxTQUFMO0FBQ0Q7QUFDRjs7QUFFRCxFQUFBLGlCQUFpQixHQUFBO0FBQ2YsU0FBSyxTQUFMO0FBQ0Q7O0FBRUQsRUFBQSxvQkFBb0IsR0FBQTtBQUNsQixTQUFLLFNBQUw7QUFDRDs7QUFyRDhDO0FBc0RoRDtBQUVELGNBQWMsQ0FBQyxNQUFmLENBQXNCLG9CQUF0QixFQUE0QyxnQkFBNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG9tIGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHsgSWNvbkRlc2NyaXB0b3IsIGljb25zIGFzIGljcyB9IGZyb20gXCIuL2ljb25zXCI7XG5cbmludGVyZmFjZSBJY29ucyB7XG4gIFtrZXk6IHN0cmluZ106IEljb25EZXNjcmlwdG9yfHVuZGVmaW5lZFxufVxuXG5jb25zdCBpY29uczogSWNvbnMgPSBpY3M7XG5cbmNvbnN0IGtleUljb25UeXBlID0gU3ltYm9sKCdpY29uVHlwZScpO1xuXG5leHBvcnQgY2xhc3MgRG9wZU1hdGVyaWFsSWNvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbICd0eXBlJyBdIH1cblxuICBwcml2YXRlIGljb25UeXBlPzogc3RyaW5nO1xuXG4gIGljb24/OiBTVkdTVkdFbGVtZW50O1xuXG4gIHByaXZhdGUgcmVtb3ZlU3ZnKCkge1xuICAgIGlmICh0aGlzLmljb24pIHtcbiAgICAgIGRvbS5yZW1vdmUodGhpcy5pY29uKTtcbiAgICAgIHRoaXMuaWNvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN2ZygpIHtcbiAgICBpZiAoIXRoaXMuaWNvblR5cGUpIHtcbiAgICAgIHRoaXMucmVtb3ZlU3ZnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmljb24pIHtcbiAgICAgICAgaWYgKHRoaXMuaWNvbltrZXlJY29uVHlwZV0gPT09IHRoaXMuaWNvblR5cGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pY29uLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLmljb24gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wYXJlbnROb2RlICYmIHRoaXMub3duZXJEb2N1bWVudCkge1xuICAgICAgICBjb25zdCBzdmcgPSBpY29uc1t0aGlzLmljb25UeXBlXTtcbiAgICAgICAgaWYgKHN2Zykge1xuICAgICAgICAgIGNvbnN0IGljb24gPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICAgICAgICBpZiAoc3ZnLnZpZXdCb3gpIHtcbiAgICAgICAgICAgIGljb24uc2V0QXR0cmlidXRlKCd2aWV3Qm94Jywgc3ZnLnZpZXdCb3gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpY29uLmlubmVySFRNTCA9IHN2Zy5jb250ZW50cztcbiAgICAgICAgICBpY29uW2tleUljb25UeXBlXSA9IHRoaXMuaWNvblR5cGU7XG4gICAgICAgICAgdGhpcy5pY29uID0gdGhpcy5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lOiBzdHJpbmcsIF8/OiBzdHJpbmcsIG5ld1ZhbHVlPzogc3RyaW5nKSB7XG4gICAgaWYgKCd0eXBlJyA9PT0gbmFtZSkge1xuICAgICAgdGhpcy5pY29uVHlwZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVTdmcoKTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnVwZGF0ZVN2ZygpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5yZW1vdmVTdmcoKTtcbiAgfVxufTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb3BlLW1hdGVyaWFsLWljb24nLCBEb3BlTWF0ZXJpYWxJY29uKTsiXSwic291cmNlUm9vdCI6IiJ9