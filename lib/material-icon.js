import dom from "./dom.js";
import { icons as ics } from "./icons.js";
const icons = ics;
const keyIconType = Symbol('iconType');
export class DopeMaterialIcon extends HTMLElement {
  static get observedAttributes() {
    return ['type'];
  }

  updateSvg() {
    if (!this.iconType) {
      this.icon && dom.remove(this.icon);
      this.icon = undefined;
    } else {
      if (this.icon) {
        if (this.icon[keyIconType] === this.iconType) {
          return;
        }

        this.icon.remove();
        this.icon = undefined;
      }

      if (this.parentNode && this.ownerDocument) {
        const svg = icons[this.iconType];

        if (svg) {
          const icon = this.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'svg');

          if (svg.viewBox) {
            icon.setAttribute('viewBox', svg.viewBox);
          }

          icon.innerHTML = svg.contents;
          icon[keyIconType] = this.iconType;
          const slot = this.getAttribute('slot');

          if (slot) {
            icon.setAttribute('slot', slot);
          }

          this.icon = this.parentNode.insertBefore(icon, this);
        }
      }
    }
  }

  attributeChangedCallback(name, _, newValue) {
    if ('type' === name) {
      this.iconType = newValue;
      this.updateSvg();
    }
  }

  connectedCallback() {
    this.style.display = 'none';
    this.updateSvg();
  }

  disconnectedCallback() {
    this.icon && dom.remove(this.icon);
    this.icon = undefined;
  }

}
;
customElements.define('dope-material-icon', DopeMaterialIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFsLWljb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUFQLE1BQWdCLFVBQWhCO0FBQ0EsU0FBeUIsS0FBSyxJQUFJLEdBQWxDLFFBQTZDLFlBQTdDO0FBTUEsTUFBTSxLQUFLLEdBQVUsR0FBckI7QUFFQSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBRCxDQUExQjtBQUVBLE9BQU0sTUFBTyxnQkFBUCxTQUFnQyxXQUFoQyxDQUEyQztBQUMvQyxhQUFXLGtCQUFYLEdBQTZCO0FBQUssV0FBTyxDQUFFLE1BQUYsQ0FBUDtBQUFtQjs7QUFNN0MsRUFBQSxTQUFTLEdBQUE7QUFDZixRQUFJLENBQUMsS0FBSyxRQUFWLEVBQW9CO0FBQ2xCLFdBQUssSUFBTCxJQUFhLEdBQUcsQ0FBQyxNQUFKLENBQVcsS0FBSyxJQUFoQixDQUFiO0FBQ0EsV0FBSyxJQUFMLEdBQVksU0FBWjtBQUNELEtBSEQsTUFHTztBQUNMLFVBQUksS0FBSyxJQUFULEVBQWU7QUFDYixZQUFJLEtBQUssSUFBTCxDQUFVLFdBQVYsTUFBMkIsS0FBSyxRQUFwQyxFQUE4QztBQUM1QztBQUNEOztBQUNELGFBQUssSUFBTCxDQUFVLE1BQVY7QUFDQSxhQUFLLElBQUwsR0FBWSxTQUFaO0FBQ0Q7O0FBQ0QsVUFBSSxLQUFLLFVBQUwsSUFBbUIsS0FBSyxhQUE1QixFQUEyQztBQUN6QyxjQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxRQUFOLENBQWpCOztBQUNBLFlBQUksR0FBSixFQUFTO0FBQ1AsZ0JBQU0sSUFBSSxHQUFHLEtBQUssYUFBTCxDQUFtQixlQUFuQixDQUFtQyw0QkFBbkMsRUFBaUUsS0FBakUsQ0FBYjs7QUFDQSxjQUFJLEdBQUcsQ0FBQyxPQUFSLEVBQWlCO0FBQ2YsWUFBQSxJQUFJLENBQUMsWUFBTCxDQUFrQixTQUFsQixFQUE2QixHQUFHLENBQUMsT0FBakM7QUFDRDs7QUFDRCxVQUFBLElBQUksQ0FBQyxTQUFMLEdBQWlCLEdBQUcsQ0FBQyxRQUFyQjtBQUNBLFVBQUEsSUFBSSxDQUFDLFdBQUQsQ0FBSixHQUFvQixLQUFLLFFBQXpCO0FBQ0EsZ0JBQU0sSUFBSSxHQUFHLEtBQUssWUFBTCxDQUFrQixNQUFsQixDQUFiOztBQUNBLGNBQUksSUFBSixFQUFVO0FBQ1IsWUFBQSxJQUFJLENBQUMsWUFBTCxDQUFrQixNQUFsQixFQUEwQixJQUExQjtBQUNEOztBQUNELGVBQUssSUFBTCxHQUFZLEtBQUssVUFBTCxDQUFnQixZQUFoQixDQUE2QixJQUE3QixFQUFtQyxJQUFuQyxDQUFaO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsRUFBQSx3QkFBd0IsQ0FBQyxJQUFELEVBQWUsQ0FBZixFQUEyQixRQUEzQixFQUE0QztBQUNsRSxRQUFJLFdBQVcsSUFBZixFQUFxQjtBQUNuQixXQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxXQUFLLFNBQUw7QUFDRDtBQUNGOztBQUVELEVBQUEsaUJBQWlCLEdBQUE7QUFDZixTQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLE1BQXJCO0FBQ0EsU0FBSyxTQUFMO0FBQ0Q7O0FBRUQsRUFBQSxvQkFBb0IsR0FBQTtBQUNsQixTQUFLLElBQUwsSUFBYSxHQUFHLENBQUMsTUFBSixDQUFXLEtBQUssSUFBaEIsQ0FBYjtBQUNBLFNBQUssSUFBTCxHQUFZLFNBQVo7QUFDRDs7QUFyRDhDO0FBc0RoRDtBQUVELGNBQWMsQ0FBQyxNQUFmLENBQXNCLG9CQUF0QixFQUE0QyxnQkFBNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG9tIGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHsgSWNvbkRlc2NyaXB0b3IsIGljb25zIGFzIGljcyB9IGZyb20gXCIuL2ljb25zXCI7XG5cbmludGVyZmFjZSBJY29ucyB7XG4gIFtrZXk6IHN0cmluZ106IEljb25EZXNjcmlwdG9yfHVuZGVmaW5lZFxufVxuXG5jb25zdCBpY29uczogSWNvbnMgPSBpY3M7XG5cbmNvbnN0IGtleUljb25UeXBlID0gU3ltYm9sKCdpY29uVHlwZScpO1xuXG5leHBvcnQgY2xhc3MgRG9wZU1hdGVyaWFsSWNvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbICd0eXBlJyBdIH1cblxuICBwcml2YXRlIGljb25UeXBlPzogc3RyaW5nO1xuXG4gIGljb24/OiBTVkdTVkdFbGVtZW50O1xuXG4gIHByaXZhdGUgdXBkYXRlU3ZnKCkge1xuICAgIGlmICghdGhpcy5pY29uVHlwZSkge1xuICAgICAgdGhpcy5pY29uICYmIGRvbS5yZW1vdmUodGhpcy5pY29uKTtcbiAgICAgIHRoaXMuaWNvbiA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaWNvbikge1xuICAgICAgICBpZiAodGhpcy5pY29uW2tleUljb25UeXBlXSA9PT0gdGhpcy5pY29uVHlwZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmljb24ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuaWNvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5vd25lckRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IHN2ZyA9IGljb25zW3RoaXMuaWNvblR5cGVdO1xuICAgICAgICBpZiAoc3ZnKSB7XG4gICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgIGlmIChzdmcudmlld0JveCkge1xuICAgICAgICAgICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBzdmcudmlld0JveCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGljb24uaW5uZXJIVE1MID0gc3ZnLmNvbnRlbnRzO1xuICAgICAgICAgIGljb25ba2V5SWNvblR5cGVdID0gdGhpcy5pY29uVHlwZTtcbiAgICAgICAgICBjb25zdCBzbG90ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKTtcbiAgICAgICAgICBpZiAoc2xvdCkge1xuICAgICAgICAgICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCBzbG90KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pY29uID0gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpY29uLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lOiBzdHJpbmcsIF8/OiBzdHJpbmcsIG5ld1ZhbHVlPzogc3RyaW5nKSB7XG4gICAgaWYgKCd0eXBlJyA9PT0gbmFtZSkge1xuICAgICAgdGhpcy5pY29uVHlwZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVTdmcoKTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy51cGRhdGVTdmcoKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuaWNvbiAmJiBkb20ucmVtb3ZlKHRoaXMuaWNvbik7XG4gICAgdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICB9XG59O1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RvcGUtbWF0ZXJpYWwtaWNvbicsIERvcGVNYXRlcmlhbEljb24pOyJdLCJzb3VyY2VSb290IjoiIn0=