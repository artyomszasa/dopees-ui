import dom from "./dom.js";
import { icons as ics } from "./icons.js";
const icons = ics;
const keyIconType = Symbol('iconType');
export class DopeMaterialIcon extends HTMLElement {
  static get observedAttributes() {
    return ['type'];
  }

  updateSvg() {
    if (!this.iconType) {
      this.icon && dom.remove(this.icon);
      this.icon = undefined;
    } else {
      if (this.icon) {
        if (this.icon[keyIconType] === this.iconType) {
          return;
        }

        this.icon.remove();
        this.icon = undefined;
      }

      if (this.parentNode && this.ownerDocument) {
        const svg = icons[this.iconType];

        if (svg) {
          const icon = this.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'svg');

          if (svg.viewBox) {
            icon.setAttribute('viewBox', svg.viewBox);
          }

          icon.innerHTML = svg.contents;
          icon[keyIconType] = this.iconType;
          const slot = this.getAttribute('slot');

          if (slot) {
            icon.setAttribute('slot', slot);
          }

          this.icon = this.parentNode.insertBefore(icon, this);
        }
      }
    }
  }

  attributeChangedCallback(name, _, newValue) {
    if ('type' === name) {
      this.iconType = newValue;
      this.updateSvg();
    }
  }

  connectedCallback() {
    this.updateSvg();
  }

  disconnectedCallback() {
    this.icon && dom.remove(this.icon);
    this.icon = undefined;
  }

}
;
customElements.define('dope-material-icon', DopeMaterialIcon);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFsLWljb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUFQLE1BQWdCLFVBQWhCO0FBQ0EsU0FBeUIsS0FBSyxJQUFJLEdBQWxDLFFBQTZDLFlBQTdDO0FBTUEsTUFBTSxLQUFLLEdBQVUsR0FBckI7QUFFQSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBRCxDQUExQjtBQUVBLE9BQU0sTUFBTyxnQkFBUCxTQUFnQyxXQUFoQyxDQUEyQztBQUMvQyxhQUFXLGtCQUFYLEdBQTZCO0FBQUssV0FBTyxDQUFFLE1BQUYsQ0FBUDtBQUFtQjs7QUFNN0MsRUFBQSxTQUFTLEdBQUE7QUFDZixRQUFJLENBQUMsS0FBSyxRQUFWLEVBQW9CO0FBQ2xCLFdBQUssSUFBTCxJQUFhLEdBQUcsQ0FBQyxNQUFKLENBQVcsS0FBSyxJQUFoQixDQUFiO0FBQ0EsV0FBSyxJQUFMLEdBQVksU0FBWjtBQUNELEtBSEQsTUFHTztBQUNMLFVBQUksS0FBSyxJQUFULEVBQWU7QUFDYixZQUFJLEtBQUssSUFBTCxDQUFVLFdBQVYsTUFBMkIsS0FBSyxRQUFwQyxFQUE4QztBQUM1QztBQUNEOztBQUNELGFBQUssSUFBTCxDQUFVLE1BQVY7QUFDQSxhQUFLLElBQUwsR0FBWSxTQUFaO0FBQ0Q7O0FBQ0QsVUFBSSxLQUFLLFVBQUwsSUFBbUIsS0FBSyxhQUE1QixFQUEyQztBQUN6QyxjQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxRQUFOLENBQWpCOztBQUNBLFlBQUksR0FBSixFQUFTO0FBQ1AsZ0JBQU0sSUFBSSxHQUFHLEtBQUssYUFBTCxDQUFtQixlQUFuQixDQUFtQyw0QkFBbkMsRUFBaUUsS0FBakUsQ0FBYjs7QUFDQSxjQUFJLEdBQUcsQ0FBQyxPQUFSLEVBQWlCO0FBQ2YsWUFBQSxJQUFJLENBQUMsWUFBTCxDQUFrQixTQUFsQixFQUE2QixHQUFHLENBQUMsT0FBakM7QUFDRDs7QUFDRCxVQUFBLElBQUksQ0FBQyxTQUFMLEdBQWlCLEdBQUcsQ0FBQyxRQUFyQjtBQUNBLFVBQUEsSUFBSSxDQUFDLFdBQUQsQ0FBSixHQUFvQixLQUFLLFFBQXpCO0FBQ0EsZ0JBQU0sSUFBSSxHQUFHLEtBQUssWUFBTCxDQUFrQixNQUFsQixDQUFiOztBQUNBLGNBQUksSUFBSixFQUFVO0FBQ1IsWUFBQSxJQUFJLENBQUMsWUFBTCxDQUFrQixNQUFsQixFQUEwQixJQUExQjtBQUNEOztBQUNELGVBQUssSUFBTCxHQUFZLEtBQUssVUFBTCxDQUFnQixZQUFoQixDQUE2QixJQUE3QixFQUFtQyxJQUFuQyxDQUFaO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsRUFBQSx3QkFBd0IsQ0FBQyxJQUFELEVBQWUsQ0FBZixFQUEyQixRQUEzQixFQUE0QztBQUNsRSxRQUFJLFdBQVcsSUFBZixFQUFxQjtBQUNuQixXQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxXQUFLLFNBQUw7QUFDRDtBQUNGOztBQUVELEVBQUEsaUJBQWlCLEdBQUE7QUFDZixTQUFLLFNBQUw7QUFDRDs7QUFFRCxFQUFBLG9CQUFvQixHQUFBO0FBQ2xCLFNBQUssSUFBTCxJQUFhLEdBQUcsQ0FBQyxNQUFKLENBQVcsS0FBSyxJQUFoQixDQUFiO0FBQ0EsU0FBSyxJQUFMLEdBQVksU0FBWjtBQUNEOztBQXBEOEM7QUFxRGhEO0FBRUQsY0FBYyxDQUFDLE1BQWYsQ0FBc0Isb0JBQXRCLEVBQTRDLGdCQUE1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkb20gZnJvbSBcIi4vZG9tXCI7XG5pbXBvcnQgeyBJY29uRGVzY3JpcHRvciwgaWNvbnMgYXMgaWNzIH0gZnJvbSBcIi4vaWNvbnNcIjtcblxuaW50ZXJmYWNlIEljb25zIHtcbiAgW2tleTogc3RyaW5nXTogSWNvbkRlc2NyaXB0b3J8dW5kZWZpbmVkXG59XG5cbmNvbnN0IGljb25zOiBJY29ucyA9IGljcztcblxuY29uc3Qga2V5SWNvblR5cGUgPSBTeW1ib2woJ2ljb25UeXBlJyk7XG5cbmV4cG9ydCBjbGFzcyBEb3BlTWF0ZXJpYWxJY29uIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHsgcmV0dXJuIFsgJ3R5cGUnIF0gfVxuXG4gIHByaXZhdGUgaWNvblR5cGU/OiBzdHJpbmc7XG5cbiAgaWNvbj86IFNWR1NWR0VsZW1lbnQ7XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdmcoKSB7XG4gICAgaWYgKCF0aGlzLmljb25UeXBlKSB7XG4gICAgICB0aGlzLmljb24gJiYgZG9tLnJlbW92ZSh0aGlzLmljb24pO1xuICAgICAgdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pY29uKSB7XG4gICAgICAgIGlmICh0aGlzLmljb25ba2V5SWNvblR5cGVdID09PSB0aGlzLmljb25UeXBlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWNvbi5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSAmJiB0aGlzLm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc3ZnID0gaWNvbnNbdGhpcy5pY29uVHlwZV07XG4gICAgICAgIGlmIChzdmcpIHtcbiAgICAgICAgICBjb25zdCBpY29uID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgaWYgKHN2Zy52aWV3Qm94KSB7XG4gICAgICAgICAgICBpY29uLnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHN2Zy52aWV3Qm94KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWNvbi5pbm5lckhUTUwgPSBzdmcuY29udGVudHM7XG4gICAgICAgICAgaWNvbltrZXlJY29uVHlwZV0gPSB0aGlzLmljb25UeXBlO1xuICAgICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLmdldEF0dHJpYnV0ZSgnc2xvdCcpO1xuICAgICAgICAgIGlmIChzbG90KSB7XG4gICAgICAgICAgICBpY29uLnNldEF0dHJpYnV0ZSgnc2xvdCcsIHNsb3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmljb24gPSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGljb24sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWU6IHN0cmluZywgXz86IHN0cmluZywgbmV3VmFsdWU/OiBzdHJpbmcpIHtcbiAgICBpZiAoJ3R5cGUnID09PSBuYW1lKSB7XG4gICAgICB0aGlzLmljb25UeXBlID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVN2ZygpO1xuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMudXBkYXRlU3ZnKCk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmljb24gJiYgZG9tLnJlbW92ZSh0aGlzLmljb24pO1xuICAgIHRoaXMuaWNvbiA9IHVuZGVmaW5lZDtcbiAgfVxufTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb3BlLW1hdGVyaWFsLWljb24nLCBEb3BlTWF0ZXJpYWxJY29uKTsiXSwic291cmNlUm9vdCI6IiJ9