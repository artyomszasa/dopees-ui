var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { dedupingMixin } from "@polymer/polymer/lib/utils/mixin.js";
import { property } from "@polymer/decorators/lib/decorators.js";
import { Uri } from "dopees-core/lib/uri.js";
import { fromBase64String } from "dopees-core/lib/string.js";
export var DopeRouter;

(function (DopeRouter) {
  function attachLinkHandlers(root) {
    root.addEventListener('click', ex => {
      const e = ex;

      if (e.shiftKey || e.ctrlKey || e.metaKey) {
        return;
      }

      if (e.target instanceof Element) {
        let target = e.target;

        while (target && target.tagName !== 'A' && !(target.getAttribute && target.getAttribute('data-page'))) {
          if (target.hasAttribute && target.hasAttribute('suppress-goto')) {
            return;
          }

          target = target.parentNode instanceof Element ? target.parentNode : null;
        }

        if (!target) {
          return;
        }

        if (target.hasAttribute && (target.hasAttribute('suppress-goto') || target.hasAttribute('draggable'))) {
          return;
        }

        const rawPage = target.getAttribute('data-page');

        if (!rawPage) {
          return;
        }

        e.preventDefault();
        e.stopPropagation();
        const page = JSON.parse(fromBase64String(rawPage));
        target.dispatchEvent(new CustomEvent('goto-page', {
          bubbles: true,
          composed: true,
          detail: {
            page,
            source: target
          }
        }));
      }
    }, true);
  }

  DopeRouter.attachLinkHandlers = attachLinkHandlers;
})(DopeRouter || (DopeRouter = {}));

export const DopeRouterMixin = dedupingMixin(base => {
  class DopeRouted extends base {
    constructor() {
      super(...arguments);
      this.__pageComponents = {};
    }

    get defaultComponent() {
      return 'admin-dashboard';
    }

    get defaultArguments() {
      return undefined;
    }

    ready() {
      super.ready(); // vissza gomb lekezelése

      window.addEventListener('popstate', e => {
        if (e.state) {
          this.initPage(e.state, true);
        }
      }, false); // kezdei állapot kilvasása url-ből

      const uri = Uri.from(window.location.href);
      const initialPage = {
        component: uri.path.substring(1).replace('/', '-') || this.defaultComponent,
        arguments: uri.path.substring(1).replace('/', '-') ? uri.queryParams : this.defaultArguments
      }; // külső layout-ban lévő linkek lekezelése.

      if (this.shadowRoot) {
        DopeRouter.attachLinkHandlers(this.shadowRoot); // oldalváltás lekezelése.

        this.shadowRoot.addEventListener('goto-page', ex => {
          const e = ex;
          e.preventDefault();
          e.stopPropagation();

          if (!e.detail) {
            this.initPage({
              component: this.defaultComponent,
              arguments: this.defaultArguments
            }, false, false);
          } else {
            this.initPage(e.detail.page, false, !!e.detail.replace);
          }
        }, true);
      }

      this.initPage(initialPage, false, true);
    }

    async initPage(page, isPop, replace) {
      if (!page) {
        throw new Error('page not specified in initPage.');
      }

      let confirmLeave = true;

      if (this.__previousPage && this.__previousPage.beforeLeave) {
        try {
          confirmLeave = await Promise.resolve(this.__previousPage.beforeLeave());
        } catch (e) {
          console.warn(e);
          confirmLeave = false;
        }
      }

      if (confirmLeave) {
        let loaded;

        try {
          await this._loadComponent(page.component);
          loaded = true;
        } catch (e) {
          console.warn(e);
          loaded = false;
        }

        if (!loaded) {
          this.notFound = true;
        } else {
          this.notFound = false;

          if (!isPop) {
            const uri = new Uri('');
            uri.path = '/' + page.component.replace('-', '/');
            uri.queryParams = page.arguments || {};

            if (replace) {
              window.history.replaceState(page, '', uri.href);
            } else {
              window.history.pushState(page, '', uri.href);
            }
          }

          this.currentPage = page;
        }
      }
    }

    _currentPageChanged(page) {
      if (!this.notFound) {
        // wait for dom-if to apply changes
        setTimeout(() => {
          if (this.__previousPage) {
            this.__previousPage.leave();
          }

          const pageElement = this.shadowRoot && this.shadowRoot.querySelector(page.component);

          if (pageElement) {
            this.__previousPage = pageElement;
            pageElement.dispatchEvent(new CustomEvent('init', {
              detail: this.currentPage.arguments || {}
            }));
          } else {
            this.notFound = true;
          }
        }, 0);
      }
    }

    _loadComponent(component) {
      if (!this.__pageComponents[component]) {
        this.__pageComponents[component] = import(this._resolveComponentPath(component)).catch(() => null);
      }

      return this.__pageComponents[component];
    }

  }

  __decorate([property({
    type: Boolean,
    notify: true,
    reflectToAttribute: true
  })], DopeRouted.prototype, "notFound", void 0);

  __decorate([property({
    type: Object,
    notify: true,
    observer: '_currentPageChanged'
  })], DopeRouted.prototype, "currentPage", void 0);

  ;
  return DopeRouted;
});
export const DopeGotoMixin = dedupingMixin(base => class extends base {
  ready() {
    super.ready();

    if (this.shadowRoot) {
      DopeRouter.attachLinkHandlers(this.shadowRoot);
    }
  }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,